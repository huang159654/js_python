const CryptoJS = require('crypto-js')
const  asks9P0BN9sk = "aiIMcWuyx1YlRrmb";//AESkey，可自定义
const  asiJ0nZuDePs = "bBhwW4Q4kp3CozCN";//密钥偏移量IV，可自定义


const  dsk6tH8ilaiP = "hKmFyIruiMsziBt0";//DESkey，可自定义
const  dsiDpQApbnXw = "xcz2eOUdKxbo6aFT";//密钥偏移量IV，可自定义

var DES = {
    decrypt: function(text, key, iv) {
        var secretkey = (CryptoJS.MD5(key).toString()).substr(0, 16);
        var secretiv = (CryptoJS.MD5(iv).toString()).substr(24, 8);
        secretkey = CryptoJS.enc.Utf8.parse(secretkey);
        secretiv = CryptoJS.enc.Utf8.parse(secretiv);
        var result = CryptoJS.DES.decrypt(text, secretkey, {
            iv: secretiv,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        });
        return result.toString(CryptoJS.enc.Utf8)
    }
};
var AES = {
    encrypt: function(text, key, iv) {
        var secretkey = (CryptoJS.MD5(key).toString()).substr(16, 16);
        var secretiv = (CryptoJS.MD5(iv).toString()).substr(0, 16);
        secretkey = CryptoJS.enc.Utf8.parse(secretkey);
        secretiv = CryptoJS.enc.Utf8.parse(secretiv);
        var result = CryptoJS.AES.encrypt(text, secretkey, {
            iv: secretiv,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        });
        return result.toString()
    },
    decrypt: function(text, key, iv) {
        var secretkey = (CryptoJS.MD5(key).toString()).substr(16, 16);
        var secretiv = (CryptoJS.MD5(iv).toString()).substr(0, 16);
        secretkey = CryptoJS.enc.Utf8.parse(secretkey);
        secretiv = CryptoJS.enc.Utf8.parse(secretiv);
        var result = CryptoJS.AES.decrypt(text, secretkey, {
            iv: secretiv,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        });
        return result.toString(CryptoJS.enc.Utf8)
    }
};
// data='eyJhcHBJZCI6IjYyZjVjNjFiMjE0NDQ3MGMwNWM2NTg2NWEyM2JiMzhlIiwibWV0aG9kIjoiR0VUREFZREFUQSIsInRpbWVzdGFtcCI6MTY4ODUzODU4MDM0MSwiY2xpZW50dHlwZSI6IldFQiIsIm9iamVjdCI6eyJjaXR5Ijoi5aSn6L+eIiwibW9udGgiOiIyMDEzMTIifSwic2VjcmV0IjoiMjk0YzI2ZmQ4NWQzNmZiNDQ2ZjFkNGUxNzk3YmFmM2MifQ=='
function dVilFmjUZCe2Fp(data) {
    // data = BASE64.decrypt(data);你这个代码，就等于55行
    //编码转换new Buffer.from(data, 'base64').tostring()换成不指定编码
    data = new Buffer.from(data, 'base64').toString('utf-8')
    data = DES.decrypt(data, dsk6tH8ilaiP, dsiDpQApbnXw);
    data = AES.decrypt(data, asks9P0BN9sk, asiJ0nZuDePs);
    data = new Buffer.from(data, 'base64').toString('utf-8')
    // json_data = JSON.parse(data)
    return data;
}
// 你打断点，数据要打进去，你拿的数据都不是穿进去的，像这样  这个就是需要解密的那个？是的,我记错了，数据是一样，你现在能解，是因为key还没变化，你换个城市，它就不行了，要我是一下
console.log(dVilFmjUZCe2Fp(data=""))